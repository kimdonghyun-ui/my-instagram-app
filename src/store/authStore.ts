import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { Login, LoginResponse, AuthUser, Register, ProfileUpdate } from '../types/auth';
import { fetchApi } from "@/lib/fetchApi";
import { toast } from 'react-hot-toast';
import { useRedirectStore } from './redirectStore';


export interface AuthUserWithRelations extends AuthUser {
  followers?: AuthUser[];    // many-to-manyÎùºÎ©¥ Î∞∞Ïó¥
  following?: AuthUser[];
  likedPosts?: LikedPost[];  // LikedPost ÌÉÄÏûÖÏùÑ Î≥ÑÎèÑÎ°ú Ï†ïÏùò
}


interface AuthStore {
  error: string | null;
  isLoading: boolean;
  accessToken: string | null;
  user: AuthUser | null;
  otherProfileData: AuthUserWithRelations | null;
  setIsLoading: (isLoading: boolean) => void;
  setAccessToken: (token: string | null) => void;
  setUser: (data: AuthUser) => void;


  toggleFollow: (targetUserId: number) => Promise<void>;

  // Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
  handleLogin: (data: Login) => Promise<void>;
  // ÌöåÏõêÍ∞ÄÏûÖ Ï≤òÎ¶¨
  handleRegister: (data: Register) => Promise<void>;
  // ÌîÑÎ°úÌïÑ ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨
  handleProfileUpdate: (data: ProfileUpdate) => Promise<void>;
  // ÌäπÏ†ï Ïú†Ï†Ä Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  fetchUserById: (id: number) => Promise<void>;
  // Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
  performLogout: () => Promise<void>;
  // Ïä§ÌÜ†Ïñ¥ Ï¥àÍ∏∞Ìôî
  reset: () => void;
}

export const useAuthStore = create<AuthStore>()(
  persist(
    (set, get) => ({
      error: null,
      isLoading: false,
      accessToken: null,
      user: null,
      otherProfileData: null,
      setIsLoading: (isLoading: boolean) => set({ isLoading }),
     
      setAccessToken: (data) => set({ accessToken: data }),
      
      setUser: (data) => set({ user: data }),

      // handleLogin = Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
      handleLogin: async (data) => {
        set({ isLoading: true, error: null });
        try {
          const response = await fetchApi<LoginResponse>("/auth/local", {
            method: "POST",
            credentials: "include", //httpOnly Ïø†ÌÇ§ Î•º Ï†úÏñ¥ÌïòÎ†§Î©¥ ÌïÑÏöî
            body: JSON.stringify(data),
          }, false);
          const { jwt, user } = response;

          set({ accessToken: jwt, user: user });

          // ‚úÖ 2. Next.js API Ìò∏Ï∂úÌïòÏó¨ Ïø†ÌÇ§ Ï†ÄÏû• (Ïø†ÌÇ§ Ïù¥Î¶ÑÏùÑ ÎèôÏ†ÅÏúºÎ°ú Ï†ÑÎã¨)
          const resCookie = await fetch("/api/set-cookie", {
            method: "POST",
            credentials: "include",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                name: "accessToken", // ‚úÖ ÏõêÌïòÎäî Ïø†ÌÇ§ Ïù¥Î¶Ñ ÏÑ§Ï†ï
                value:jwt,
                action: "set",
            }),
          });

          if (!resCookie.ok) {
            console.warn("accessToken Ïø†ÌÇ§ ÏÑ§Ï†ï Ïã§Ìå®");
          }

          toast.success('Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ!');
          useRedirectStore.getState().setLinkName('/feed'); // ‚úÖ Î°úÍ∑∏Ïù∏ ÌõÑ Î¶¨Îã§Ïù¥Î†âÌä∏ Ï≤òÎ¶¨

        } catch (err) {
          set({ error: 'Î°úÍ∑∏Ïù∏ Ïã§Ìå®!' });
          toast.error('Î°úÍ∑∏Ïù∏ Ïã§Ìå®!');
          throw err;
        } finally {
          set({ isLoading: false });
        }
      },

      // handleRegister = ÌöåÏõêÍ∞ÄÏûÖ Ï≤òÎ¶¨
      handleRegister: async (data) => {
        set({ isLoading: true, error: null });
        try {
          await fetchApi<LoginResponse>("/auth/local/register", {
            method: "POST",
            credentials: "include", //httpOnly Ïø†ÌÇ§ Î•º Ï†úÏñ¥ÌïòÎ†§Î©¥ ÌïÑÏöî
            body: JSON.stringify(data),
          }, false);
          toast.success('ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ!');
          await get().handleLogin({ 
            identifier: data.email,
            password: data.password 
          });
        } catch (err) {
          set({ error: 'ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®!' });
          toast.error('ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®!');
          throw err;
        } finally {
          set({ isLoading: false });
        }
      },

      // handleProfileUpdate = ÌîÑÎ°úÌïÑ ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨
      handleProfileUpdate: async (data) => {
        set({ isLoading: true, error: null });
        try {
          const user = get().user;
          const response = await fetchApi<AuthUser>(`/users/${user?.id}`, {
            method: "PUT",
            credentials: "include", //httpOnly Ïø†ÌÇ§ Î•º Ï†úÏñ¥ÌïòÎ†§Î©¥ ÌïÑÏöî
            body: JSON.stringify(data),
          }, false);
          console.log("response", response);
          set({ user: response });
          toast.success('ÌîÑÎ°úÌïÑ ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ!');
        } catch (err) {
          set({ error: 'ÌîÑÎ°úÌïÑ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®!' });
          toast.error('ÌîÑÎ°úÌïÑ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®!');
          throw err;
        } finally {
          set({ isLoading: false });
        }
      },


      // fetchUserById = ÌäπÏ†ï Ïú†Ï†Ä Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
      fetchUserById: async (id: number) => {
        try {
          set({ isLoading: true, error: null });
    
          // ‚úÖ StrapiÏóêÏÑú ÌäπÏ†ï Ïú†Ï†Ä Í∞ÄÏ†∏Ïò§Í∏∞
          const data = await fetchApi<AuthUserWithRelations>(`/users/${id}?populate=profileImage,following,followers,likedPosts`, {
            method: 'GET',
            credentials: 'include',
          });
          // return data;
          set({ otherProfileData: data });
        } catch (err: any) {
          console.error('Ïú†Ï†Ä Ï†ïÎ≥¥ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®', err);
          set({ error: err.message || 'Ïú†Ï†Ä Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®', isLoading: false });
        }
      },



      // toggleFollow = ÌåîÎ°úÏö∞/Ïñ∏ÌåîÎ°úÏö∞ Ï≤òÎ¶¨
      toggleFollow: async (targetUserId: number) => {
        const { user, otherProfileData } = get();
        if (!user || !otherProfileData) {
          toast.error("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
          return;
        }
      
        // ÌòÑÏû¨ ÏÉÅÎåÄÎ∞© ÌîÑÎ°úÌïÑÏùò followers Î∞∞Ïó¥
        const currentFollowers = otherProfileData.followers || [];
      
        // ‚úÖ Ïã§Ìå® Ïãú Î°§Î∞±Ìï† ÏõêÎ≥∏ followers Î∞∞Ïó¥ÏùÑ Î∞±ÏóÖ
        const prevFollowers = currentFollowers;
      
        // ÎÇ¥Í∞Ä Ïù¥ ÏÇ¨ÎûåÏùÑ ÌåîÎ°úÏö∞ÌñàÎäîÏßÄ: followers Î∞∞Ïó¥ ÏïàÏóê ÎÇ¥ idÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
        const isFollowing = currentFollowers.some((f) => f.id === user.id);
      
        // UIÏóê Î∞îÎ°ú Î∞òÏòÅÌï† followers Î∞∞Ïó¥ Ï§ÄÎπÑ
        const updatedFollowers = isFollowing
          ? currentFollowers.filter((f) => f.id !== user.id) // ÎÇ¥ id Ï†úÍ±∞ (Ïñ∏Ìåî)
          : [...currentFollowers, user]; // ÎÇ¥ Ï†ïÎ≥¥ Ï∂îÍ∞Ä (ÌåîÎ°úÏö∞)
      
        // ‚úÖ 1. Î®ºÏ†Ä UI ÏÉÅÌÉúÎ•º Í∞±Ïã† (Îã§Ïãú GET Ïïà Ìï¥ÎèÑ UIÍ∞Ä Ï¶âÏãú ÏóÖÎç∞Ïù¥Ìä∏Îê®)
        set((state) => ({
          otherProfileData: {
            ...state.otherProfileData!,
            followers: updatedFollowers,
          },
        }));
      
        try {
          set({ isLoading: true });
      
          // ‚úÖ 2. Î∞±ÏóîÎìúÏóê PUT Ï†ÑÏÜ°
          const currentFollowingIds: number[] = []; // user.followingÏù¥ ÏóÜÏúºÎãà Îπà Î∞∞Ïó¥ÏóêÏÑú ÏãúÏûë
          const newFollowingIds = isFollowing
            ? currentFollowingIds.filter((id) => id !== targetUserId)
            : [...currentFollowingIds, targetUserId];
      
          await fetchApi(`/users/${user.id}`, {
            method: "PUT",
            credentials: "include",
            body: JSON.stringify({
              following: newFollowingIds,
            }),
          });
      
          toast.success(isFollowing ? "Ïñ∏ÌåîÎ°úÏö∞ ÌñàÏäµÎãàÎã§." : "ÌåîÎ°úÏö∞ ÌñàÏäµÎãàÎã§.");
        } catch (err) {
          console.error("ÌåîÎ°úÏö∞/Ïñ∏ÌåîÎ°úÏö∞ Ïã§Ìå®:", err);
          toast.error("ÌåîÎ°úÏö∞/Ïñ∏ÌåîÎ°úÏö∞ Ïã§Ìå®!");
      
          // üî• Ïã§Ìå® Ïãú UI ÏÉÅÌÉúÎ•º Î°§Î∞±
          set((state) => ({
            otherProfileData: {
              ...state.otherProfileData!,
              followers: prevFollowers, // ÏõêÎûò ÏÉÅÌÉúÎ°ú ÎêòÎèåÎ¶º
            },
          }));
        } finally {
          set({ isLoading: false });
        }
      },
      
      
      // performLogout = Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨
      performLogout: async () => {
        set({ isLoading: true, error: null });
        try {
 
          await fetchApi("/auth/logout", {
            method: "POST",
            credentials: "include", //httpOnly Ïø†ÌÇ§ Î•º Ï†úÏñ¥ÌïòÎ†§Î©¥ ÌïÑÏöî
          }, false);

          toast.success('Î°úÍ∑∏ÏïÑÏõÉ ÏÑ±Í≥µ!');
        } catch (err) {

          //refreshToken Ïø†ÌÇ§ ÏÇ≠Ï†ú(ÏúÑÏóê Î°úÍ∑∏ÏïÑÏõÉ api Ïã§Ìå®ÏãúÎ•º ÎåÄÎπÑ)
          await fetch("/api/set-cookie", {
            method: "POST",
            credentials: "include", //httpOnly Ïø†ÌÇ§ Î•º Ï†úÏñ¥ÌïòÎ†§Î©¥ ÌïÑÏöî
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              name: "refreshToken",
              action: "delete",
            }),
          });
          toast.success('Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìå®ÏßÄÎßå Í∞ïÏ†úÎ°ú Î°úÍ∑∏ÏïÑÏõÉ Ï≤òÎ¶¨!');
        } finally {
          set({ isLoading: false });

          // HttpOnly Ïø†ÌÇ§ Ï†úÍ±∞ ÏöîÏ≤≠ (Next.js API route)
          //accessToken Ïø†ÌÇ§ ÏÇ≠Ï†ú
          await fetch("/api/set-cookie", {
            method: "POST",
            credentials: "include", //httpOnly Ïø†ÌÇ§ Î•º Ï†úÏñ¥ÌïòÎ†§Î©¥ ÌïÑÏöî
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                name: "accessToken",
                action: "delete",
            }),
          });

          //##### Ïä§ÌÜ†Ïñ¥ Ï¥àÍ∏∞Ìôî(Zustand) ÏãúÏûë#####
          get().reset(); //localStorage + Î©îÎ™®Î¶¨ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî

          useRedirectStore.getState().setLinkName('/login'); // Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏(.tsÏóêÏÑúÎäî routerÎ•º ÏÇ¨Ïö©Î™ªÌïòÎØÄÎ°ú Ìï¥Í≤∞Ï±ÖÏúºÎ°ú ÏÇ¨Ïö©)

          //##### Ïä§ÌÜ†Ïñ¥ Ï¥àÍ∏∞Ìôî(Zustand) ÎÅù#####

        }
      },

      // reset = Ïä§ÌÜ†Ïñ¥ Ï¥àÍ∏∞Ìôî
      reset: () => {
        set({
          accessToken: null,
          user: null,
          error: null,
          isLoading: false,
        });
        useAuthStore.persist.clearStorage();
      },
    }),
    {
      name: 'auth-store',
      //partialize = Ïù¥Í±∞ ÎÇ¥Î∂ÄÏóê ÎÑ£Îäî Ìï≠Î™©Îßå Î°úÏª¨Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•Ïù¥ Îê®(partialize ÏÇ¨Ïö©ÏïàÌïòÎ©¥ Î™®Îì† Ìï≠Î™©Ïù¥ Ï†ÄÏû•Îê®)
      partialize: (state) => ({
        user: state.user,
        // accessToken: state.accessToken, ÌÜ†ÌÅ∞ÏùÄ Î≥¥ÏïàÏÑ± Ï†ïÎ≥¥Ïù¥ÎØÄÎ°ú Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•ÌïòÏßÄ ÏïäÏùå
      }),
    }
  )
);
